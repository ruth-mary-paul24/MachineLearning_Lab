# -*- coding: utf-8 -*-
"""1BM22CS331_Lab-2-Linear-Multiple-Regression. ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ihk3mtpglPEj8D87yIISL6C0HkQ9SFb6
"""

import pandas as pd
df = pd.read_csv('canada_per_capita_income.csv')
print(df.head())

import pandas as pd
import numpy as np
from sklearn import linear_model
import matplotlib.pyplot as plt

# Load the dataset (make sure to replace with the correct file path)
df = pd.read_csv('canada_per_capita_income.csv')

# Inspect the data to understand its structure
print(df.head())

# Make sure the column names are correct
# The dataset should have 'year' and 'per capita income (US$)' columns
# Check the column names
print(df.columns)

# Plotting the data
plt.xlabel('Year')
plt.ylabel('Per Capita Income (US$)')
plt.scatter(df['year'], df['per capita income (US$)'], color='red', marker='+')
plt.show()

# Preparing the data for linear regression
X = df[['year']]  # Feature: Year
y = df['per capita income (US$)']  # Target: Per Capita Income

# Create linear regression object
reg = linear_model.LinearRegression()

# Train the model
reg.fit(X, y)

# Check the model's coefficients and intercept
print(f"Coefficient (m): {reg.coef_[0]}")
print(f"Intercept (b): {reg.intercept_}")

# Predict the per capita income for the year 2020
predicted_income_2020 = reg.predict([[2020]])
print(f"Predicted per capita income for 2020: ${predicted_income_2020[0]:.2f}")

# Optionally, calculate manually using the equation Y = m*X + b
manual_prediction = 2020 * reg.coef_[0] + reg.intercept_
print(f"Manual prediction for 2020: ${manual_prediction:.2f}")

import pandas as pd
df = pd.read_csv('salary.csv')
print(df.head())

import pandas as pd
import numpy as np
from sklearn import linear_model
import matplotlib.pyplot as plt

# Step 1: Load the dataset
df = pd.read_csv('salary.csv')

# Inspect the data to ensure correct loading
print(df.head())  # View the first few rows of the dataset
print(df.columns)  # Check the column names

# Step 2: Drop rows with NaN values
df = df.dropna()

# Step 3: Preprocess the data
df.columns = ['experience', 'salary']  # Rename columns for clarity

# Step 4: Plot the data (optional)
plt.xlabel('Years of Experience')
plt.ylabel('Salary')
plt.scatter(df['experience'], df['salary'], color='red', marker='+')
plt.show()

# Step 5: Prepare the data for regression
X = df[['experience']]  # Feature: Years of experience
y = df['salary']  # Target: Salary

# Step 6: Create and train the linear regression model
reg = linear_model.LinearRegression()
reg.fit(X, y)

# Step 7: Check the model's coefficients and intercept
print(f"Coefficient (m): {reg.coef_[0]}")
print(f"Intercept (b): {reg.intercept_}")

# Step 8: Predict the salary for an employee with 12 years of experience
predicted_salary_12_years = reg.predict([[12]])  # Predict salary for 12 years of experience
print(f"Predicted salary for an employee with 12 years of experience: ${predicted_salary_12_years[0]:.2f}")

import pandas as pd
df = pd.read_csv('hiring.csv')
print(df.head())

import pandas as pd
df = pd.read_csv('1000_Companies.csv')
print(df.head())

import pandas as pd
import numpy as np
from sklearn import linear_model

# Step 1: Load the hiring dataset
df_hiring = pd.read_csv('hiring.csv')

# Check the first few rows of the dataset
print(df_hiring.head())

# Step 2: Convert experience from words to numbers
experience_mapping = {
    'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5,
    'six': 6, 'seven': 7, 'eight': 8, 'nine': 9, 'ten': 10,
    'eleven': 11, 'twelve': 12
}

# Convert 'experience' column from words to numbers
df_hiring['experience'] = df_hiring['experience'].replace(experience_mapping)

# Step 3: Handle missing values in the 'experience' column
# Fill NaN values in 'experience' column with the median
df_hiring['experience'] = df_hiring['experience'].fillna(df_hiring['experience'].median())

# Step 4: Handle missing values in other columns (test_score and interview_score)
# Fill NaN values with the median or drop rows with NaN values
df_hiring = df_hiring.dropna()  # Drop rows that contain NaN values in any column

# Step 5: Prepare the data for regression
X_hiring = df_hiring[['experience', 'test_score(out of 10)', 'interview_score(out of 10)']]  # Features
y_hiring = df_hiring['salary($)']  # Target variable: Salary

# Step 6: Create and train the regression model
reg_hiring = linear_model.LinearRegression()
reg_hiring.fit(X_hiring, y_hiring)

# Step 7: Model coefficients and intercept
print(f"Model Coefficients: {reg_hiring.coef_}")
print(f"Model Intercept: {reg_hiring.intercept_}")

# Step 8: Predict salaries for new candidates
# Candidate 1: 2 years experience, 9 test score, 6 interview score
prediction_1 = reg_hiring.predict([[2, 9, 6]])
print(f"Predicted salary for Candidate 1: ${prediction_1[0]:.2f}")

# Candidate 2: 12 years experience, 10 test score, 10 interview score
prediction_2 = reg_hiring.predict([[12, 10, 10]])
print(f"Predicted salary for Candidate 2: ${prediction_2[0]:.2f}")

import pandas as pd
import numpy as np
from sklearn import linear_model
from sklearn.preprocessing import LabelEncoder

# Step 1: Load the companies dataset
df_companies = pd.read_csv('1000_Companies.csv')

# Check the data to understand its structure
print(df_companies.head())

# Step 2: Preprocess the 'State' column (encode categorical values)
label_encoder = LabelEncoder()
df_companies['State'] = label_encoder.fit_transform(df_companies['State'])

# Handle missing values if there are any
df_companies = df_companies.dropna()

# Step 3: Prepare the data for regression
X_companies = df_companies[['R&D Spend', 'Administration', 'Marketing Spend', 'State']]  # Features
y_companies = df_companies['Profit']  # Target variable: Profit

# Step 4: Create and train the regression model
reg_companies = linear_model.LinearRegression()
reg_companies.fit(X_companies, y_companies)

# Step 5: Model coefficients and intercept
print(f"Model Coefficients: {reg_companies.coef_}")
print(f"Model Intercept: {reg_companies.intercept_}")

# Step 6: Predict profit for a new company
# New company data: 91694.48 R&D Spend, 515841.3 Administration, 11931.24 Marketing Spend, Florida State
new_company_data = np.array([[91694.48, 515841.3, 11931.24, label_encoder.transform(['Florida'])[0]]])
predicted_profit = reg_companies.predict(new_company_data)
print(f"Predicted profit for the new company: ${predicted_profit[0]:.2f}")